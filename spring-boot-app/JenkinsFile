pipeline {
    agent any
    environment {
        AWS_DEFAULT_REGION = "us-east-1"
        EKS_CLUSTER_NAME = "eks-cluster"
        EKS_NODE_TYPE = "t2.medium"
        EKS_NODE_COUNT = "3"
        AWS_ACCOUNT_ID = '124355672501'
        ECR_REPOSITORY = 'jjtech-demo'
        DOCKER_IMAGE_TAG = "${BUILD_NUMBER}"
        ECR_REGISTRY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
    }
    tools {
        maven 'localMaven'
        jdk 'localJdk'
    }
    stages {
        stage('Git Checkout') {
            steps {
                echo 'Cloning the application code...'
                git branch: 'main', url: 'https://github.com/anselmenumbisia/jjtech-ci-cd-pipeline-project-k8s.git'
            }
        }
        stage('Install eksctl if needed') {
            steps {
                sh '''
                    if ! command -v eksctl >/dev/null 2>&1; then
                        ARCH=amd64
                        PLATFORM=$(uname -s)_$ARCH
                        curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
                        curl -sL "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_checksums.txt" | grep $PLATFORM | sha256sum --check
                        tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
                        sudo install -m 0755 /tmp/eksctl /usr/local/bin && rm /tmp/eksctl
                    else
                        echo "eksctl already installed"
                    fi
                '''
            }
        }
        stage('Create EKS Cluster') {
            steps {
                sh '''
                    if aws eks describe-cluster --name $EKS_CLUSTER_NAME --region $AWS_DEFAULT_REGION >/dev/null 2>&1; then
                        echo "EKS cluster $EKS_CLUSTER_NAME already exists. Skipping creation."
                    else
                        eksctl create cluster \
                            --name $EKS_CLUSTER_NAME \
                            --region $AWS_DEFAULT_REGION \
                            --nodegroup-name standard-workers \
                            --node-type $EKS_NODE_TYPE \
                            --nodes $EKS_NODE_COUNT \
                            --nodes-min $EKS_NODE_COUNT \
                            --nodes-max $EKS_NODE_COUNT
                    fi
                    aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
                '''
            }
        }
        stage('Build and Test') {
            steps {
                sh 'cd spring-boot-app && mvn -U clean package'
            }
        }
        stage('Unit Test') {
            steps {
                sh 'cd spring-boot-app && mvn test'
            }
        }
        stage('Integration Test') {
            steps {
                sh 'cd spring-boot-app && mvn verify -DskipUnitTests'
            }
        }
        stage('Checkstyle Code Analysis') {
            steps {
                sh 'cd spring-boot-app && mvn checkstyle:checkstyle'
            }
            post {
                success {
                    echo 'Generated Analysis Result'
                }
            }
        }
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://172.31.89.185:9000/"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }
        stage('Upload artifact to Nexus') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'nexus-credentials', passwordVariable: 'PASSWORD', usernameVariable: 'USER_NAME')]) {
                    sh "sed -i \"s/.*<username><\\/username>/<username>$USER_NAME<\\/username>/g\" ${WORKSPACE}/nexus-setup/settings.xml"
                    sh "sed -i \"s/.*<password><\\/password>/<password>$PASSWORD<\\/password>/g\" ${WORKSPACE}/nexus-setup/settings.xml"
                    sh 'sudo cp ${WORKSPACE}/nexus-setup/settings.xml /var/lib/jenkins/.m2'
                    sh 'cd spring-boot-app && mvn clean deploy -DskipTests'
                }
            }
        }
        stage('Install docker') {
            steps {
                sh "sudo yum install docker -y"
                sh "sudo systemctl start docker"
                sh "sudo systemctl enable docker"
                sh "sudo usermod -aG docker jenkins"
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                sh "cd spring-boot-app && docker build -t ${ECR_REPOSITORY}:${DOCKER_IMAGE_TAG} ."
                sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}"
                sh "docker tag ${ECR_REPOSITORY}:${DOCKER_IMAGE_TAG} ${ECR_REGISTRY}/${ECR_REPOSITORY}:${DOCKER_IMAGE_TAG}"
                sh "docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${DOCKER_IMAGE_TAG}"
                sh "docker rmi ${ECR_REGISTRY}/${ECR_REPOSITORY}:${DOCKER_IMAGE_TAG}"
                sh "docker rmi ${ECR_REPOSITORY}:${DOCKER_IMAGE_TAG}"
            }
        }
        stage('Install kubectl') {
            steps {
                sh '''
                    KUBECTL_VERSION="v1.24.0"
                    curl -LO "https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
                    sudo chmod +x kubectl
                    sudo mv kubectl /usr/local/bin/
                '''
            }
        }
        stage("Deploy to EKS") {
            steps {
                sh "sed -i 's/replaceImageTag/${DOCKER_IMAGE_TAG}/g' k8s-manifests/deployment.yaml"
                sh "sed -i 's/replaceaccountid/${AWS_ACCOUNT_ID}/g' k8s-manifests/deployment.yaml"
                dir('k8s-manifests') {
                    sh "aws eks update-kubeconfig --name ${EKS_CLUSTER_NAME} --region ${AWS_DEFAULT_REGION}"
                    sh "kubectl apply -f ."
                }
            }
        }

        stage('Delete EKS Cluster') {
            steps {
                input "Do you want to delete the EKS cluster?"
                sh '''
                    eksctl delete cluster --name $EKS_CLUSTER_NAME --region $AWS_DEFAULT_REGION
                '''
            }
        }
    }
}
